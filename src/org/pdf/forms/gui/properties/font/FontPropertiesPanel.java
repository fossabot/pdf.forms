/**
 * ===========================================
 * PDF Forms Designer
 * ===========================================
 *
 * Project Info:  http://pdfformsdesigne.sourceforge.net
 * (C) Copyright 2006-2008..
 * Lead Developer: Simon Barnett (n6vale@googlemail.com)
 *
 * 	This file is part of the PDF Forms Designer
 *
 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


 *
 * ---------------
 * FontPropertiesPanel.java
 * ---------------
 */
package org.pdf.forms.gui.properties.font;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.pdf.forms.fonts.FontHandler;
import org.pdf.forms.gui.designer.IDesigner;
import org.pdf.forms.gui.properties.customcomponents.colorcombobox.ColorCellRenderer;
import org.pdf.forms.gui.properties.customcomponents.colorcombobox.ColorComboBoxEditor;
import org.pdf.forms.utils.XMLUtils;
import org.pdf.forms.widgets.IWidget;
import org.w3c.dom.Element;

public class FontPropertiesPanel extends javax.swing.JPanel {

    //fontNameBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Times-Roman", "Times-Bold", "Times-Italic", "Times-BoldItalic", "Helvetica", "Helvetica-Bold", "Helvetica-Oblique", "Helvetica-BoldOblique", "Courier", "Courier-Bold", "Courier-Oblique", "Courier-BoldOblique", "Symbol", "ZapfDingbats" }));

    private ColorComboBoxEditor editor;
    private IDesigner designerPanel;
    private Map widgetsAndProperties;

    /**
     * Creates new form FontPropertiesPanel
     */
    public FontPropertiesPanel() {
        initComponents();
    }

    public void setDesignerPanel(IDesigner designerPanel) {
        this.designerPanel = designerPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        currentlyEditingBox = new javax.swing.JComboBox();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        String[] fontFamilies = getFonts();
        fontNameBox = new JComboBox(fontFamilies);
        fontStyleBox = new javax.swing.JComboBox();
        underlineBox = new javax.swing.JComboBox();
        strikethroughBox = new javax.swing.JComboBox();
        colorBox = new javax.swing.JComboBox();
        fontSizeBox = new javax.swing.JComboBox();

        jLabel1.setText("Currently Editing:");

        currentlyEditingBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Caption and Value", "Caption properties", "Value properties"}));
        currentlyEditingBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCurrentlyEditingBox(evt);
            }
        });

        jLabel2.setText("Font:");

        jLabel3.setText("Font Size:");

        jLabel4.setText("Font Style:");

        jLabel5.setText("Underline:");
        jLabel5.setEnabled(false);

        jLabel6.setText("Strikethrough:");
        jLabel6.setEnabled(false);

        jLabel7.setText("Color:");

        fontNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFont(evt);
            }
        });

        fontStyleBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Plain", "Bold", "Italic", "Bold Italic"}));
        fontStyleBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFont(evt);
            }
        });

        underlineBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"No Underline", "Underline", "Double Underline", "Word Underline", "Word Double Underline"}));
        underlineBox.setEnabled(false);
        underlineBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFont(evt);
            }
        });

        strikethroughBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Off", "On"}));
        strikethroughBox.setEnabled(false);
        strikethroughBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFont(evt);
            }
        });

        colorBox.setEditable(true);
        colorBox.setMaximumRowCount(5);
        colorBox.setModel(new javax.swing.DefaultComboBoxModel(new Object[]{Color.black, Color.blue, Color.cyan, Color.green, Color.red, Color.white, Color.yellow, "Custom"}));
        Color color = (Color) colorBox.getSelectedItem();
        editor = new ColorComboBoxEditor(color, colorBox);
        colorBox.setEditor(editor);
        colorBox.setRenderer(new ColorCellRenderer());
        colorBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateColor(evt);
            }
        });

        fontSizeBox.setEditable(true);
        fontSizeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"6", "8", "10", "12", "14", "16", "18", "20", "24", "28", "36", "48", "72"}));
        fontSizeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFont(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                                .add(jLabel4)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 35, Short.MAX_VALUE)
                                                .add(fontStyleBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(layout.createSequentialGroup()
                                                .add(jLabel1)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(currentlyEditingBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(layout.createSequentialGroup()
                                                .add(jLabel7)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 59, Short.MAX_VALUE)
                                                .add(colorBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(layout.createSequentialGroup()
                                                .add(jLabel5)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 39, Short.MAX_VALUE)
                                                .add(underlineBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(layout.createSequentialGroup()
                                                .add(jLabel6)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 19, Short.MAX_VALUE)
                                                .add(strikethroughBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(jLabel2)
                                                        .add(jLabel3))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 40, Short.MAX_VALUE)
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                        .add(fontNameBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                        .add(fontSizeBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jLabel1)
                                        .add(currentlyEditingBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jLabel2)
                                        .add(fontNameBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jLabel3)
                                        .add(fontSizeBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jLabel4)
                                        .add(fontStyleBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jLabel5)
                                        .add(underlineBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jLabel6)
                                        .add(strikethroughBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(jLabel7)
                                        .add(colorBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(113, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private String[] getFonts() {
        FontHandler fontHandler = FontHandler.getInstance();
        Map fontFileMap = fontHandler.getFontFileMap();
        Font[] fonts = (Font[]) fontFileMap.keySet().toArray(new Font[fontFileMap.size()]);
        String[] fontFamilies = new String[fonts.length];
        for (int i = 0; i < fonts.length; i++) {
            fontFamilies[i] = fonts[i].getFontName();
        }

        return fontFamilies;
    }

    private void updateFont(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFont
        Set widgets = widgetsAndProperties.keySet();

        for (Iterator it = widgets.iterator(); it.hasNext(); ) {

            IWidget widget = (IWidget) it.next();

            Element fontElement = (Element) widgetsAndProperties.get(widget);

            List fontList = XMLUtils.getElementsFromNodeList(fontElement.getChildNodes());
            Element captionElement = (Element) fontList.get(0);
            Element valueElement = null;
            if (widget.allowEditCaptionAndValue()) {
                valueElement = (Element) fontList.get(1);
            }

            Element captionFontName = XMLUtils.getPropertyElement(captionElement, "Font Name");
            Element captionFontSize = XMLUtils.getPropertyElement(captionElement, "Font Size");
            Element captionFontStyle = XMLUtils.getPropertyElement(captionElement, "Font Style");
            Element captionUnderline = XMLUtils.getPropertyElement(captionElement, "Underline");
            Element captionStrikethrough = XMLUtils.getPropertyElement(captionElement, "Strikethrough");
            Element captionColor = XMLUtils.getPropertyElement(captionElement, "Color");

            Element valueFontName = null, valueFontSize = null, valueFontStyle = null, valueUnderline = null,
                    valueStrikethrough = null, valueColor = null;

            if (widget.allowEditCaptionAndValue()) {
                valueFontName = XMLUtils.getPropertyElement(valueElement, "Font Name");
                valueFontSize = XMLUtils.getPropertyElement(valueElement, "Font Size");
                valueFontStyle = XMLUtils.getPropertyElement(valueElement, "Font Style");
                valueUnderline = XMLUtils.getPropertyElement(valueElement, "Underline");
                valueStrikethrough = XMLUtils.getPropertyElement(valueElement, "Strikethrough");
                valueColor = XMLUtils.getPropertyElement(valueElement, "Color");
            }

            setProperty(fontNameBox.getSelectedItem(), captionFontName, valueFontName);
            setProperty(fontSizeBox.getSelectedItem(), captionFontSize, valueFontSize);

            int index = fontStyleBox.getSelectedIndex();
            setProperty(index == -1 ? null : index + "", captionFontStyle, valueFontStyle);

            index = underlineBox.getSelectedIndex();
            setProperty(index == -1 ? null : index + "", captionUnderline, valueUnderline);

            index = strikethroughBox.getSelectedIndex();
            setProperty(index == -1 ? null : index + "", captionStrikethrough, valueStrikethrough);

            Color color = ((Color) colorBox.getSelectedItem());
            setProperty(color == null ? null : color.getRGB() + "", captionColor, valueColor);

            widget.setFontProperties((Element) widgetsAndProperties.get(widget), currentlyEditingBox.getSelectedIndex());
        }

        designerPanel.getMainFrame().setPropertiesToolBar(widgets);

        designerPanel.repaint();
    }//GEN-LAST:event_updateFont

    private void updateColor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateColor
        if (colorBox.getSelectedItem().equals("Custom")) {
            Color currentBackground = (Color) editor.getItem();
            Color color = JColorChooser.showDialog(null, "Color Chooser", currentBackground);
            if ((color != null) && (currentBackground != color)) {
                colorBox.setSelectedItem(color);
            }
        }

        updateFont(null);
    }//GEN-LAST:event_updateColor

    private void setProperty(Object value, Element captionElement, Element valueElement) {
        if (value != null) {
            if (currentlyEditingBox.getSelectedItem().equals("Caption and Value")) {
                captionElement.getAttributeNode("value").setValue(value.toString());
                if (valueElement != null)
                    valueElement.getAttributeNode("value").setValue(value.toString());
            } else if (currentlyEditingBox.getSelectedItem().equals("Caption properties")) {
                captionElement.getAttributeNode("value").setValue(value.toString());
            } else if (currentlyEditingBox.getSelectedItem().equals("Value properties")) {
                if (valueElement != null)
                    valueElement.getAttributeNode("value").setValue(value.toString());
            }
        }
    }

    private void updateCurrentlyEditingBox(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCurrentlyEditingBox
        setProperties(widgetsAndProperties, currentlyEditingBox.getSelectedIndex());
    }//GEN-LAST:event_updateCurrentlyEditingBox

    public void updateAvailiableFonts() {
        String[] fonts = getFonts();
        DefaultComboBoxModel model = new DefaultComboBoxModel(fonts);
        fontNameBox.setModel(model);
    }

    public void setProperties(Map widgetsAndProperties, int currentlyEditing) {
        this.widgetsAndProperties = widgetsAndProperties;

//        /** update the list of fonts just in case a new one has been added */
//        String[] fonts = getFonts();
//        DefaultComboBoxModel model = new DefaultComboBoxModel(fonts);
//        fontNameBox.setModel(model);

        String fontNameToUse = null, fontSizeToUse = null, fontStyleToUse = null, underlineToUse = null,
                strikethroughToUse = null, colorToUse = null;

        boolean allowEditCaptionAndValue = false;
        for (Iterator it = widgetsAndProperties.keySet().iterator(); it.hasNext(); ) {
            IWidget widget = (IWidget) it.next();
            if (widget.allowEditCaptionAndValue()) {
                allowEditCaptionAndValue = true;
                break;
            }
        }

        if (!allowEditCaptionAndValue) {
            currentlyEditing = 1;
        }

        /** set the currently editing box */
        currentlyEditingBox.setSelectedIndex(currentlyEditing);
        currentlyEditingBox.setEnabled(allowEditCaptionAndValue);

        /** iterate through the widgets */
        for (Iterator it = widgetsAndProperties.keySet().iterator(); it.hasNext(); ) {

            IWidget widget = (IWidget) it.next();

            Element fontProperties = (Element) widgetsAndProperties.get(widget);

            /** get caption properties */
            Element caption = (Element) fontProperties.getElementsByTagName("font_caption").item(0);

            String captionFontName = XMLUtils.getAttributeFromChildElement(caption, "Font Name");
            String captionFontSize = XMLUtils.getAttributeFromChildElement(caption, "Font Size");
            String captionFontStyle = XMLUtils.getAttributeFromChildElement(caption, "Font Style");
            String captionUnderline = XMLUtils.getAttributeFromChildElement(caption, "Underline");
            String captionStrikethrough = XMLUtils.getAttributeFromChildElement(caption, "Strikethrough");
            String captionColor = XMLUtils.getAttributeFromChildElement(caption, "Color");

            String valueFontName, valueFontSize, valueFontStyle, valueUnderline, valueStrikethrough, valueColor;

            if (widget.allowEditCaptionAndValue()) {

                /** get value properties */
                Element value = (Element) fontProperties.getElementsByTagName("font_value").item(0);

                valueFontName = XMLUtils.getAttributeFromChildElement(value, "Font Name");
                valueFontSize = XMLUtils.getAttributeFromChildElement(value, "Font Size");
                valueFontStyle = XMLUtils.getAttributeFromChildElement(value, "Font Style");
                valueUnderline = XMLUtils.getAttributeFromChildElement(value, "Underline");
                valueStrikethrough = XMLUtils.getAttributeFromChildElement(value, "Strikethrough");
                valueColor = XMLUtils.getAttributeFromChildElement(value, "Color");
            } else {
                valueFontName = captionFontName;
                valueFontSize = captionFontSize;
                valueFontStyle = captionFontStyle;
                valueUnderline = captionUnderline;
                valueStrikethrough = captionStrikethrough;
                valueColor = captionColor;
            }

            /** get properties to use */
            String fontName = getProperty(currentlyEditing, captionFontName, valueFontName);
            String fontSize = getProperty(currentlyEditing, captionFontSize, valueFontSize);
            String fontStyle = getProperty(currentlyEditing, captionFontStyle, valueFontStyle);
            String underline = getProperty(currentlyEditing, captionUnderline, valueUnderline);
            String strikethrough = getProperty(currentlyEditing, captionStrikethrough, valueStrikethrough);
            String color = getProperty(currentlyEditing, captionColor, valueColor);

            if (fontNameToUse == null) { // this must be the first time round
                fontNameToUse = fontName;
                fontSizeToUse = fontSize;
                fontStyleToUse = fontStyle;
                underlineToUse = underline;
                strikethroughToUse = strikethrough;
                colorToUse = color;

            } else { // check for subsequent widgets

                if (!fontNameToUse.equals(fontName))
                    fontNameToUse = "mixed";

                if (!fontSizeToUse.equals(fontSize))
                    fontSizeToUse = "mixed";

                if (!fontStyleToUse.equals(fontStyle))
                    fontStyleToUse = "mixed";

                if (!underlineToUse.equals(underline))
                    underlineToUse = "mixed";

                if (!strikethroughToUse.equals(strikethrough))
                    strikethroughToUse = "mixed";

                if (!colorToUse.equals(color))
                    colorToUse = "mixed";
            }
        }

        setComboValue(fontNameBox, fontNameToUse.equals("mixed") ? null : fontNameToUse);
        setComboValue(fontSizeBox, fontSizeToUse.equals("mixed") ? null : fontSizeToUse);
        setComboValue(fontStyleBox, fontStyleToUse.equals("mixed") ? null : new Integer(fontStyleToUse));
        setComboValue(underlineBox, underlineToUse.equals("mixed") ? null : new Integer(underlineToUse));
        setComboValue(strikethroughBox, strikethroughToUse.equals("mixed") ? null : new Integer(strikethroughToUse));
        setComboValue(colorBox, colorToUse.equals("mixed") ? null : new Color(Integer.parseInt(colorToUse)));
    }

    private void setComboValue(JComboBox comboBox, Object value) {
        ActionListener listener = comboBox.getActionListeners()[0];
        comboBox.removeActionListener(listener);

        if (value instanceof Integer) {
            comboBox.setSelectedIndex(((Integer) value).intValue());
        } else {
            comboBox.setSelectedItem(value);
        }

        comboBox.addActionListener(listener);
    }

    private String getProperty(int currentlyEditing, String captionProperty, String valueProperty) {
        String propertyToUse = null;

        switch (currentlyEditing) {
            case IWidget.COMPONENT_BOTH:
                if (captionProperty.equals(valueProperty)) { // both are the same
                    propertyToUse = captionProperty;
                } else {
                    /** properties are different */
                    propertyToUse = "mixed";
                }

                break;
            case IWidget.COMPONENT_CAPTION:
                /** just set the caption properties */
                propertyToUse = captionProperty;

                break;

            case IWidget.COMPONENT_VALUE:
                /** just set the value properties */
                propertyToUse = valueProperty;

                break;
        }

        return propertyToUse;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox colorBox;
    private javax.swing.JComboBox currentlyEditingBox;
    private javax.swing.JComboBox fontNameBox;
    private javax.swing.JComboBox fontSizeBox;
    private javax.swing.JComboBox fontStyleBox;
    private javax.swing.JComboBox strikethroughBox;
    private javax.swing.JComboBox underlineBox;
    // End of variables declaration//GEN-END:variables
}

