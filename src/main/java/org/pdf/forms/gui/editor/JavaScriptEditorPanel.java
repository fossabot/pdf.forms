/**
* ===========================================
* PDF Forms Designer
* ===========================================
*
* Project Info:  http://pdfformsdesigne.sourceforge.net
* (C) Copyright 2006-2008..
* Lead Developer: Simon Barnett (n6vale@googlemail.com)
*
* 	This file is part of the PDF Forms Designer
*
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


*
* ---------------
* JavaScriptEditorPanel.java
* ---------------
*/
package org.pdf.forms.gui.editor;

import java.awt.Component;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;

import org.pdf.forms.document.FormsDocument;
import org.pdf.forms.document.Page;
import org.pdf.forms.utils.XMLUtils;
import org.pdf.forms.widgets.IWidget;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

import com.vlsolutions.swing.docking.DockKey;
import com.vlsolutions.swing.docking.Dockable;

public class JavaScriptEditorPanel extends javax.swing.JPanel implements Dockable {

    private DockKey key = new DockKey("Script Editor");

    private LinkedHashMap eventsAndValues;

    private Set widgets;

    /**
     * Creates new form JavaScriptEditorPanel
     */
    public JavaScriptEditorPanel() {
        key.setFloatEnabled(true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        scriptBox = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        eventBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        languageBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        runAtBox = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JSeparator();
        saveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        scriptBox.setColumns(20);
        scriptBox.setRows(5);
        scriptBox.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane1.setViewportView(scriptBox);

        jLabel1.setText("Show:");

        eventBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventChanged(evt);
            }
        });

        jLabel2.setText("Language:");

        languageBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "JavaScript" }));

        jLabel3.setText("Run At:");

        runAtBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Client" }));

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveClicked(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(eventBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(saveButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 70, Short.MAX_VALUE)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(languageBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(runAtBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jSeparator3)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .add(eventBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .add(languageBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .add(runAtBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .add(saveButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveClicked

        if (widgets.size() == 1 && widgets.iterator().next() instanceof FormsDocument) {
            FormsDocument document = (FormsDocument) widgets.iterator().next();
            saveJavaScript(document.getDocument());
        } else {
            saveJavaScriptInWidgets();
        }

    }//GEN-LAST:event_saveClicked

    private void eventChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventChanged
        scriptBox.setText(((String) eventsAndValues.get(eventBox.getSelectedItem())));
    }//GEN-LAST:event_eventChanged

    public void setScript(Set widgets) {
        this.widgets = widgets;

        eventBox.removeAllItems();

        eventsAndValues = new LinkedHashMap();

        if (widgets.size() == 1) {
            Object object = widgets.iterator().next();

            if (object == null || object instanceof Page)
                return;

            if (object instanceof IWidget) {
                IWidget widget = (IWidget) object;

                key.setName("Script Editor - " + widget.getWidgetName() + " Component");

                handleWidgets(widgets);
            } else {
                key.setName("Script Editor - Document");

                FormsDocument document = (FormsDocument) object;

                extractJavaScript(document.getDocument());
            }
        } else {
            key.setName("Script Editor - Multiple Components");
            handleWidgets(widgets);
        }

        for (Iterator it = eventsAndValues.keySet().iterator(); it.hasNext();) {
            eventBox.addItem(it.next());
        }
    }

    private void saveJavaScriptInWidgets() {
        for (Iterator it = widgets.iterator(); it.hasNext();) {
            IWidget widget = (IWidget) it.next();

            Document document = widget.getProperties();

            saveJavaScript(document);
        }
    }

    private void saveJavaScript(Document document) {
        Element javaScriptPropertiesElement = (Element) XMLUtils.getElementsFromNodeList(
                document.getElementsByTagName("javascript")).get(0);

        Element currentElement = (Element) XMLUtils.getElementsFromNodeList(
                javaScriptPropertiesElement.getElementsByTagName((String) eventBox.getSelectedItem())).get(0);

        Text currentTextNode = (Text) currentElement.getChildNodes().item(0);

        if (currentTextNode == null) {
            currentTextNode = document.createTextNode(scriptBox.getText());
            currentElement.appendChild(currentTextNode);
        } else {
            currentTextNode.setNodeValue(scriptBox.getText());
        }
    }

    private void handleWidgets(Set widgets) {
        for (Iterator it = widgets.iterator(); it.hasNext();) {

            IWidget widget = (IWidget) it.next();

            Document properties = widget.getProperties();

            if (extractJavaScript(properties))
                break;
        }
    }

    private boolean extractJavaScript(Document properties) {
        List elementsFromNodeList = XMLUtils.getElementsFromNodeList(
                properties.getElementsByTagName("javascript"));

        if (elementsFromNodeList.isEmpty()) {
            setState(false);
            return true;
        } else {
            setState(true);
        }

        Element javaScriptPropertiesElement = (Element) elementsFromNodeList.get(0);

        List javaScriptProperties = XMLUtils.getElementsFromNodeList(javaScriptPropertiesElement.getChildNodes());

        for (Iterator iter = javaScriptProperties.iterator(); iter.hasNext();) {
            Element element = (Element) iter.next();

            String event = element.getNodeName();

            NodeList childNodes = element.getChildNodes();

            String nodeValue;
            if (childNodes.getLength() == 0) {
                nodeValue = "";
            } else {
                Text textNode = (Text) childNodes.item(0);
                nodeValue = textNode.getNodeValue();
            }

            String currentValue = (String) eventsAndValues.get(event);
            if (currentValue == null) {
                eventsAndValues.put(event, nodeValue);
            } else if (!currentValue.equals(nodeValue)) {
                eventsAndValues.put(event, "mixed scripts in this event for the selected components");
            }
        }

        return false;
    }

    public void setState(boolean state) {
        eventBox.removeAllItems();
        scriptBox.setText("");

        eventBox.setEnabled(state);
        languageBox.setEnabled(state);
        runAtBox.setEnabled(state);
        scriptBox.setEnabled(state);

        key.setName("Script Editor");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox eventBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JComboBox languageBox;
    private javax.swing.JComboBox runAtBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea scriptBox;
    // End of variables declaration//GEN-END:variables

    public DockKey getDockKey() {
        return key;
    }

    public Component getComponent() {
        return this;
    }
}
